# -*- coding: utf-8 -*-
"""Python Basics - Module 02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Sd2e2u0oV2ZUVGNvxOskebK6JlgjzBtx

#Listas
"""

# Criando uma lista vazia.
listavazia = []

# Criando uma lista com alguns valores.
numeros = [1, 3, 7, 8, 9]

# Listas podem mesclar diferentes tipos de valores.
listamista = [14, "let's code", 0.1, True]

print(numeros)
print(listamista)

# Acessamos cada elemento da lista através de um índice entre colchetes.
# Os índices começam em 0.
print(numeros[0])
print(numeros[1])
print(numeros[2])
print(numeros[3])
print(numeros[4])

# Listas são mutáveis: podemos alterar o valor de seus itens.
numeros[2] = 5
print(numeros)

# Um jeito inteligente de trabalhar com listas é utilizando loops.
indice = 0
while indice < 5:
    print(numeros[indice])
    indice = indice + 1

nome_paises = ['Brasil', 'China', 'Canadá','Japão', 'Argentina']
nome_paises

len(nome_paises)

nome_paises[4]

nome_paises[-2]

nome_paises[3] = 'Colômbia'

print(nome_paises)

print(nome_paises[:])

print(nome_paises[2:4])

print(nome_paises[1:-1])

print(nome_paises[3:])

print(nome_paises[::-1])

print(nome_paises[::2])

print("Brasil" in nome_paises)

print("Brasil" not in nome_paises)

lista_capitais = []

lista_capitais.append('Brasília')
lista_capitais.append('Buenos Aires')
lista_capitais.append('Pequim')

print(lista_capitais)

lista_capitais.insert(2, 'Paris')
print(lista_capitais)

lista_capitais.remove('Buenos Aires')
print(lista_capitais)

lista_capitais.pop(2)

"""Funções de listas"""

indice = 0
while indice < len(numeros):
    print(numeros[indice])
    indice = indice + 1

animais = []
resposta = 's'
while resposta == 's' or resposta == 'S':
    resposta = input('Deseja adicionar um animal à lista (s/n)? ')
    if (resposta == 's' or resposta == 'S'):
        animal = input('Digite o nome do animal: ')
        animais.append(animal) # adiciona o novo animal à lista
print(animais)

animal = input('Digite o animal a ser deletado da lista: ')
animais.remove(animal)
print(animais)

"""list.count()"""

jogadores = ['Ronaldo', 'Rivaldo', 'Ronaldo', 'Adriano']
ronaldos = jogadores.count('Ronaldo')
print(jogadores)
print('Quantidade de Ronaldos: ', ronaldos)

"""list.index()"""

rivaldo = jogadores.index('Rivaldo')
print("Rivaldo está na posição ", rivaldo)

"""list.sort()"""

jogadores.sort()
print("jogadores em ordem alfabética: ", jogadores)

"""max(list) e min(list)"""

digitos = [3, 1, 4, 1, 5, 9, 2, 6, 5]
maior = max(digitos)
menor = min(digitos)
print(digitos)
print("Maior = ", maior, "e menor = ", menor)

"""#Tuplas"""

# Uma tupla é uma coleção de objetos que lembra muito as listas.

# Ao invés de colchetes, usamos parênteses para declarar as tuplas:
numeros = (1,2,3,5,7,11)

# Podemos declarar sem parênteses também:
numeros = 1,2,3,5,7,11

# Para acessar um valor, utilizamos a mesma sintaxe das listas:
print(numeros[4])
print(type(numeros))

# Podemos gerar uma tupla a partir de uma lista...
lista1 = [3, 1, 4, 1, 5, 9, 2, 6, 5]
tupla1 = tuple(lista1)
print(tupla1)

# ...ou uma lista a partir de uma tupla:
tupla2 = [1, 6, 1, 8]
lista2 = list(tupla2)
print(lista2)

# Também pode-se usar o unpacking com uma tupla:
a, b, c, d, e, f = numeros # "desempacota" a tupla numeros
print("O primeiro vale:", a, "e o ultimo vale:", f)

nome_estado = 'PR', 'SP', 'RS','SC',
print(nome_estado, type(nome_estado))

p, s, r, s, = nome_estado

print(p,s,r,s)

"""#Strings"""

# Suponhamos que temos a seguinte string:

frase = 'uma FRASE'

# Podemos acessar individualmente cada caractere em uma frase.
# A ideia é a mesma de acessar uma lista:
print(frase[0])
print(frase[1])
print(frase[2])

tamanho = len(frase)
print("A frase possui", tamanho, "caracteres")

# Porém, strings são imutáveis: não podemos alterar caracteres individuais
# A linha abaixo, se for descomentada, dará erro no programa:
# frase[4] = 'C'

# Podemos converter strings para listas:
listafrase = list(frase)
print(listafrase)

# A função join() intercala cada elemento de uma lista com uma string.
stringfinal = '-py'.join(listafrase)
print(stringfinal)

# Usar um join() com uma string vazia é útil para transformar a lista de volta
# em string:
stringfinal = ''.join(listafrase)
print(stringfinal)

# Existem algumas funções interessantes que retornam a string "tratada":
s1 = frase.capitalize() # 1a letra maiúscula, restante minúscula
s2 = frase.title() # todo início de palavra em maiúscula, resto minúscula
s3 = frase.upper() # string inteira em maiúscula
s4 = frase.lower() # string inteira em minúscula
s5 = frase.replace('F', 'C') # substitui a primeira substring pela segunda

print(s1)
print(s2)
print(s3)
print(s4)
print(s5)
# Note que NENHUMA delas ALTERA a string original, elas sempre retornam
# a string nova.
print('String original:', frase)

# Outra possibilidade com strings é quebrar a string em uma lista de substrings
# Sempre que o caractere especificado é encontrado, a string é quebrada
quebra1 = frase.split(' ') # quebra a frase no caractere espaço em branco
quebra2 = s3.split('A') # quebra a frase em maiúsculas no caractere 'A'

print(quebra1)
print(quebra2)

# Podemos inserir quebras de linha com '\n'
frase = 'uma\nFRASE'
print(frase)

# Podemos inserir tabulação com '\t'
frase = 'uma\n\tFRASE'
print(frase)
# Para conseguir representar a barra '\', precisamos de 2 barras:
frase = 'uma\\FRASE'

empresa = 'Google'
empres2 = "Let's Code"

frase = "a pizzaria disse: \"hoje a pizza ta boa\""
print(frase)

empresa[0]

empresa[:3]

nome_cidades = "São paulo, Brasiliea, Fco. Beltrao, Pato branco"
nome_cidades = nome_cidades.split(',')
nome_cidades

cabecalho = "                 MENU"
print(cabecalho.strip())

maravilhosa = input("Que cidade é a maravilhosa")
maravilhosa = maravilhosa.strip()
while maravilhosa.lower() != 'rio de janeiro':
  print("tenta dnv")
  maravilhosa = input('que cidade é maravilhosa?')

print("boa")

mensagem = 'vc viu o pietro'
fui_citado = "pietro" in mensagem
print(fui_citado)

# Dois operadores aritméticos possuem um comportamento especial em strings:
# Operador de soma (+): concatena (une) 2 strings.
palavra1 = "Let's"
palavra2 = "Code"
palavra3 = palavra1 + palavra2
print(palavra3)

# Operador de multiplicação (*): copia uma string 'n' vezes:
palavra = 'uma'
trespalavras = 3*palavra
print(trespalavras)

prod = 'chocolate'
preco = 3.14
print('O produto {} custa {}.'.format(prod, preco))

# Na linha acima, prod substituirá o primeiro {}, e preco o segundo {}.
# Saída: O produto chocolate custa 3.14.

# É possível colocar algumas opções especiais de formatação. Por exemplo:

stringoriginal = 'O litro da gasolina custa {:.2f}'
preco = 3.14159265
stringcompleta = stringoriginal.format(preco)
print(stringcompleta)

# Pode-se chamar as variávies em diferentes ordens:

print('{2}, {1} and {0}'.format('a', 'b', 'c'))

print('{0}{1}{0}'.format('abra', 'cad'))

# Podemos especificar um número de dígitos obrigatório por campo.
# Vejamos o exemplo:

dia = 1
mes = 8
ano = 2019
data1 = '{}/{}/{}'.format(dia, mes, ano)
print(data1)
# Saída: 1/8/2019
# O dia e o mês ocupam apenas 1 espaço

data2 = '{:2d}/{:2d}/{:4d}'.format(dia, mes, ano)
# A opção 'd' significa que o parâmetro é um número inteiro.
print(data2)
# Saída:  1/ 8/2019
# Agora, dia e mês ocupam obrigatoriamente 2 espaços:  1/ 8/2019

# Podemos forçar que os espaços em branco sejam preenchidos com o número 0:
data3 = '{:02d}/{:02d}/{:04d}'.format(dia, mes, ano)
print(data3)
# Saída: 01/08/2019
# Agora sim a data está no formato usual, dd/mm/aaaa: 01/08/2019

# Um modo mais simples de utilizar o format
nome = "Pietro"
profissao = "professor"
escola = "Let's Code"

print(f"{nome} é {profissao} da {escola}.")
# Saída: Pietro é professor da Let's Code.

nome = "welliton"
idade = 27

print(nome + " tem " + str(idade) + " anos")

print('{} tem {} anos'.format(nome,idade))

f'{nome} tem {idade} anos'

"""#Dicionários"""

# O dicionário é definido pelos símbolos { e }

dicionario = {}

# O dicionário não possui um "append".
# Adicionamos valores diretamente:

dicionario['cat'] = 'gato'
dicionario['dog'] = 'cachorro'
dicionario['mouse'] = 'rato'

print(dicionario)
print(type(dicionario))

# Dicionários, assim como as listas, são mutáveis:
dicionario['dog'] = 'cão'
print(dicionario)

# Podemos criar o dicionário diretamente também:
dicionario2 = {'Curso': 'Python Pro', 'Linguagem':'Python', 'Módulo':2}
print(dicionario2)

# Podemos utilizar o operador "in" para verificar se uma chave existe:
if 'cat' in dicionario:
    print('cat existe!') # Sim
if 'bird' in dicionario:
    print('bird existe!') # Não
if 'gato' in dicionario:
    print('gato existe!') # Não

#Também podemos utilizar as funções .keys() e .values() para obter listas
#com apenas as chaves ou apenas os valores do dicionário.

chaves = dicionario.keys()
print(chaves)

valores = dicionario.values()
print(valores)

# Já a função .items(), retorna uma lista de tuplas (chave, valor) de um dicionário

itens = dicionario.items()
print(itens)

"""#Estrutura de Repetição FOR"""

fib = [1, 1, 2, 3, 5, 8, 13]
for elemento in fib:
    print(elemento)

# Com 1 parâmetro, ele será interpretado como valor final (exclusivo).
# O valor inicial será 0 e o incremento será 1.

for numero in range(10):
    print(numero)
    # este exemplo imprime os números de 0 a 9, de um em um

# Com 2 parâmetros, o primeiro será o valor inicial (inclusivo) e o
# segundo será o final (exclusivo).
# O incremento continuará sendo 1.

for numero in range(1,11):
    print(numero)
    # este exemplo imprime os números de 1 a 10, de um em um

# Com 3 parâmetros, o terceiro será interpretado como incremento.
for numero in range(1,20,2):
    print(numero)
    # este exemplo imprime os ímpares positivos menores do que 20
    # ele começa valendo 1 e salta de 2 em 2 até atingir ou passar 20

# O incremento pode ser também um decremento (incremento negativo).
for numero in range (10,0,-1):
    print(numero)
    #Imprimindo os números de 1 a 10 em ordem decrescente

for nome in nome_cidades:
    print(nome)

cidade = {
    'nome': 'SP',
    'estado': 'SP',
    'pop': 12.2
}

for chave in cidade:
  print(f'{chave}: {cidade[chave]}')

for pos in range(len(nome_cidades)):
  nome_cidades[pos] = 'Rio'
print(nome_cidades)

list(range(10))

list(range(2,10))

list(range(2,10,2))

"""#Funções

funções
"""

def hello():
    print("Olá, mundo!")

hello()

def ola(nome):
    print("Olá", nome)

ola("Welliton")

aluno = "João"
ola(aluno)

def dadosPessoais(nome, idade, cidade):
    print("Seu nome é {}, você tem {} anos e mora em {}.".format(nome, idade, cidade))

dadosPessoais("José", 30, "Maceió")

dadosPessoais(idade=56, cidade="Florianópolis", nome="Ana")

"""funções com resposta"""

def somatorio(lista):
    soma = 0
    for item in lista:
        soma = soma + item
    return soma

numeros = [1, 2, 3, 4, 5]
soma_dos_numeros = somatorio(numeros)
print("A soma dos elementos da lista vale: ", soma_dos_numeros)

if somatorio(numeros) > 50:
    print("Que soma grande!")
else:
    print("Que soma pequena!")

"""funções recursivas"""

def funcaoRecursiva(numero):
    if (numero != 1):
        funcaoRecursiva(numero - 1)
    print(numero)

print("Testando a função recursiva:")
funcaoRecursiva(10)

"""aula"""

def media(valor1, valor2, valor3):
  soma = valor1 + valor2 + valor3
  media = soma/3
  return(media)

print(media(10,2,8))

"""agrupando parâmetros"""

def piscina(*infos):
    vol = infos[0]*infos[1]*infos[2]
    return vol

volume = piscina(5, 4, 5)

print('O volume é: ', volume)

def piscina(prof, largura, comprimento):
    vol = prof*largura*comprimento
    return vol

lista = [5, 4, 5]

volume = piscina(*lista)

print('O volume é: ', volume)

"""parâmetros opcionais"""

def piscina(prof, **infos):
    vol = prof*infos['largura']*infos['comprimento']
    return vol

volume = piscina(5, largura=4, comprimento=5)

print('O volume é: ', volume)

def piscina(prof, largura=4, comprimento=5):
    vol = prof*largura*comprimento
    return vol

infos = {'largura': 10, 'comprimento': 20}

volume = piscina(5, **infos)

print('O volume é: ', volume)

def media2(*args):
  soma = sum(args)
  media = soma /len(args)
  return (media)

media2(10,9,8,4,2,1)

def print_info(**kwargs):
  print(kwargs, type(kwargs))

print_info(nome='welliton', sobrenome='leal', idade=27)