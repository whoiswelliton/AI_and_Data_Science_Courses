# -*- coding: utf-8 -*-
"""Python Basics - Final Project (COVID-19).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZkBQCvnM0G0Te6Ko7HaK0aV9JC7y90Eo
"""

from google.colab import drive
drive.mount('/content/drive')

import requests as r

url = 'http://api.covid19api.com/dayone/country/brazil'
resp = r.get(url)

resp.status_code

raw_data = resp.json()

"""#Data Pre-Processing"""

raw_data[0]

final_data = []
for obs in raw_data:
    final_data.append([obs['Confirmed'], obs['Deaths'], obs['Recovered'], obs['Active'], obs['Date']])

final_data.insert(0, ['Confirmados', 'Obitos', 'Recuperados', 'Ativos', 'Data'])

final_data

CONFIRMADOS = 0
OBITOS = 1
RECUPERADOS = 2
ATIVOS = 3
DATA = 4

#remover zeros depois da data/irrelevante
for i in range (1, len(final_data)):
    final_data[i][DATA] = final_data[i][DATA][:10]

import datetime as dt

import csv

with open("/content/drive/My Drive/Colab Notebooks/Santander Coders - Data Science/projetocovid.csv","w") as file:
    writer = csv.writer(file)
    writer.writerows(final_data)

for i in range(1,len(final_data)):
    final_data[i][DATA] = dt.datetime.strptime(final_data[i][DATA], '%Y-%m-%d')

final_data

"""#Data Visualization"""

#função para receber o dataset

def get_datasets(y, labels):
    if type(y[0]) == list:
        datasets = []
        for i in range(len(y)):
            datasets.append({
                "label": labels[i],
                "data": y[i]
            })
        return datasets
    else:
        return [
            {
                "label": labels[0],
                "data": y
            }
        ]

#definir o título do gráfico

def set_title(title=""):
    if title != "":
        display = "true"
    else:
        display = "false"
    return {
        "title": title,
        "display": display
    }

#função para criar o dicionário representativo dos dados

def create_chart(x, y, labels, kind="bar", title=""):
    datasets = get_datasets(y, labels)
    options = set_title(title)
    chart = {
        "type": kind,
        "data": {
            "labels": x,
            "datasets": datasets
        },
        "options": options
    }
    
    return chart

#função para fazer a requisição na API

def get_api_chart(chart):
    url_base = "https://quickchart.io/chart"
    resp = r.get(f"{url_base}?c={str(chart)}")
    return resp.content

#função salvar imagem

def save_image(path,content):
    with open(path,"wb") as image:
      image.write(content)

from PIL import Image
from IPython.display import display

#função para mostrar a img

def display_image (path):
    img_pil = Image.open(path)
    display(img_pil)

y_data_1 = []
for obs in final_data[1::10]:
    y_data_1.append(obs[CONFIRMADOS])

y_data_2 = []
for obs in final_data[1::10]:
    y_data_2.append(obs[RECUPERADOS])

labels = ['Confirmados','Recuperados']

x = []
for obs in final_data[1::10]:
    x.append(obs[DATA].strftime('%d/%m/%Y'))

chart = create_chart(x, [y_data_1, y_data_2], labels, title='Gráfico de Confirmados X Recuperados')
chart_content = get_api_chart(chart)
save_image('/content/drive/My Drive/Colab Notebooks/Santander Coders - Data Science/graficocovid.png',chart_content)
display_image('/content/drive/My Drive/Colab Notebooks/Santander Coders - Data Science/graficocovid.png')

from urllib.parse import quote

def get_api_qrcode(link):
    text = quote(link)
    url_base = 'https://quickchart.io/qr'
    resp = r.get(f'{url_base}?text={text}')
    return resp.content

url_base = "https://quickchart.io/chart"
link = f"{url_base}?c={str(chart)}"

save_image('/content/drive/My Drive/Colab Notebooks/Santander Coders - Data Science/qrcode.png', get_api_qrcode(link))
display_image('/content/drive/My Drive/Colab Notebooks/Santander Coders - Data Science/qrcode.png')